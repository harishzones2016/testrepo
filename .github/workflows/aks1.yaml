name: Create Azure AKS With Terraform
on:
  workflow_dispatch:

permissions:
      id-token: write
      contents: read
jobs: 
  AKS-Cluster-Deployment:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./AKS
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        
 #     - name: 'Az CLI login'
 #       uses: azure/login@v1
 #       with:
 #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
 #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
 #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Login to Azure with SPN
        uses: azure/CLI@v1
        with:
          azcliversion: 2.27.2
          inlineScript: |
            az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_SP_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
     
#      - name: 'Change Directory to Terraform'
#        run: cd terraform
  
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v3
#        with:
#          terraform_version: 1.1.0
#       cli_config_credentials_token: ${{ secrets.TFC_TOKEN_ID }}

      - name: Terraform Init
        id: init
        run: terraform init
#        env:
#          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
#          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
       
      - name: Terraform Plan
        id: plan
        run: terraform plan -out tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./AKS

      - name: Terraform Output
        run: terraform output

      #- name: Deploy Application
      #  run: |
      #    az aks get-credentials -n "cluster-bursting-jennet" -g "rg-refined-swine"
      #    kubectl apply -f ./AKSApp/aks-store-quickstart.yaml
      #    sleep 40
      #    kubectl get service store-front
      #    rm -rf ~/.kube
